
version: "3.9"

services:
  kafka:
    image: bitnami/kafka
    restart: unless-stopped
    mem_limit: ${KAFKA_MAX_MEM:-1024m}
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_HEAP_OPTS: "-Xmx${KAFKA_MAX_MEM:-1024m} -Xms${KAFKA_MAX_MEM:-1024m}"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_NUM_PARTITIONS: 1
      KAFKA_CFG_LOG_RETENTION_HOURS: 24
      KAFKA_CFG_LOG_RETENTION_BYTES: 500000
      KAFKA_CFG_ACKS: "all"
      KAFKA_CFG_COMPRESSION_TYPE: "snappy"
      KAFKA_CFG_RETRIES: 0
      KAFKA_CFG_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION: 1
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
    ports:
      - "9092:9092"
    volumes:
      - kafka:/bitnami/kafka
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  mongo_setup:
    image: mongo
    restart: on-failure
    volumes:
      - ./scripts/mongo_setup.sh:/scripts/setup.sh
    entrypoint: [ "/bin/bash", "/scripts/setup.sh" ]
    depends_on:
      - mongo1
      - mongo2
      - mongo3

  mongo1:
    image: mongo
    ports:
      - 27017:27017
    restart: on-failure
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--journal", "--dbpath", "/data/db" ]
    volumes:
      - mongo1:/data/db

  mongo2:
    image: mongo
    ports:
      - 27018:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--journal", "--dbpath", "/data/db" ]
    volumes:
      - mongo2:/data/db

  mongo3:
    image: mongo
    ports:
      - 27019:27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0", "--journal", "--dbpath", "/data/db" ]
    volumes:
      - mongo3:/data/db

  node_exporter:
    image: bitnami/node-exporter
    restart: on-failure
    profiles:
      - monitor
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  prometheus:
    image: bitnami/prometheus
    restart: on-failure
    profiles:
      - monitor
    volumes:
      - ./config/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml 
      - prometheus_data:/opt/bitnami/prometheus/data
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  grafana:
    image: grafana/grafana
    restart: on-failure
    profiles:
      - monitor
      - logging
    ports:
        - 3030:3000
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    volumes:
      - grafana:/var/lib/grafana

  promtail:
    image: grafana/promtail
    restart: on-failure
    profiles:
      - logging
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./config/promtail.yaml:/etc/promtail/config.yaml:ro
    command: -config.file=/etc/promtail/config.yaml
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  loki:
    image: grafana/loki
    restart: on-failure
    profiles:
      - logging
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./config/loki.yaml:/etc/loki/config.yaml
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

volumes:
  kafka:
  mongo1:
  mongo2:
  mongo3:
  prometheus_data:
  grafana:
