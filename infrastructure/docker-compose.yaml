version: "3.9"

services:
  kafka:
    image: bitnami/kafka
    restart: on-failure
    profiles:
      - donotstart
    ports:
      - "9093:9093"
      - "9092:9092"
    volumes:
      - kafka:/bitnami/kafka
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_KRAFT_CLUSTER_ID: "eTj21O9XT0ycOBJAGMOhHw"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR: 2
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_ACKS: "all"
      KAFKA_CFG_COMPRESSION_TYPE: "snappy"
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  kowl:
    image: rsmnarts/kowl
    restart: on-failure
    ports:
      - 8080:8080
    environment:
      KAFKA_BROKERS: kafka:9092
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    
  mongo_setup:
    image: mongo
    restart: on-failure
    profiles:
      - donotstart
    volumes:
      - ./scripts/mongo_setup.sh:/scripts/setup.sh
    entrypoint: [ "/bin/bash", "/scripts/setup.sh" ]
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  mongo:
    image: mongo
    restart: on-failure
    profiles:
      - donotstart
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db
    command: [ "--bind_ip_all", "--replSet", "rs0",  "--dbpath", "/data/db" ]
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  node_exporter:
    image: bitnami/node-exporter
    restart: on-failure
    profiles:
      - basic
    ports:
      - 9100:9100
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  prometheus:
    image: bitnami/prometheus
    restart: on-failure
    profiles:
      - webui
    volumes:
      - ./config/prometheus.yaml:/opt/bitnami/prometheus/conf/prometheus.yml
      - prometheus_data:/opt/bitnami/prometheus/data
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  grafana:
    image: grafana/grafana
    restart: on-failure
    profiles:
      - webui
    ports:
      - 3030:3000
    volumes:
      - grafana:/var/lib/grafana
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  promtail:
    image: grafana/promtail
    restart: on-failure
    profiles:
      - basic
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./config/promtail.yaml:/etc/promtail/config.yaml:ro
    command: -config.file=/etc/promtail/config.yaml
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  loki:
    image: grafana/loki
    restart: on-failure
    profiles:
      - webui
    ports:
      - 3100:3100
    volumes:
      - ./config/loki.yaml:/etc/loki/config.yaml
    command: -config.file=/etc/loki/config.yaml
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

volumes:
  kafka:
  grafana:
  prometheus_data:
  mongo: