*Авторизация 
**Взаимодействие с бэкенд, с БД
БД 
{
	Логин
	Пароль/хеш с солью

	Id - индентификатор пользователя
}
Индексы по токену ID пользователя. 

Логин используется для авторизации со стороны пользователя. 
Пароль его данные подтверждающие что он тот, за кого выдает себя. 
Мы хешируем пароль, и солим его, допусим с частью самого пароля. И храним это в бд. В виде хеша. 
Проверка пароля происходит по сверки хешей. 

Id индентификатор пользователя, который будет использоваться в остальных частях программ, чтобы узнавать конкретного пользователя. 

Предполагаемое взаимодействие. 

В сервис авторизации, идет первичное обращение, с логином, и паролем. 

Подтвержается что такой человек существует в базе. 

При обращении регистрации, проверяем есть ли логин в базе. Если есть то возвращаем ошибку записи. 
Если человека такого нет. И записали успешно. Возвращаем Id пользователя. И сообщение об успешной операции. 

Input регистрация{
	string Login
	string Password
}


OutPut регистрация{
	string Код_ответа : ok/no
	string Id
}

Функция авторизации. 
При обращении авторизации, проверяем есть ли логин такой в базе. Если есть, проверяем соответствие пароля. 
Если логин есть, и пароль соответствует. 
Возвращаем ID пользователя. и сообщеие об успешной операции. 
Иначе возвращаем ошибку. И пустую строку вместо ID 

Input Авторизация{
	string Login
	string Password
}


OutPut Авторизация{
	string Код_ответа : ok/no
	string Id
}

Возможное взаимодействие между сервисами. 
Работаем с кафкой как с сервисом который используется для изменения состояния.
Событие Регистрации человека. 
Продюсер Фасад. 
Топик с пулом регистрации. 
Консюмер микросервисы авторизации. 

Проблемы авторизации по кафке. 
Из минусов, проблема. Не известно как передавать обратную связь тому же обьекту, тому же подключению, что создал событие. 
допустим передать обратно ID пользователя. 
