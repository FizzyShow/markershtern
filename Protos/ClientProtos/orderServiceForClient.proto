syntax = "proto3";

option csharp_namespace = "OrderForClient";

import "decimalValue.proto";
/*Определение сервиса создания заявки, которое включает:
Запрос-ответ на создание заявки пользователя с типом - покупка или продажа
*/
package orderClient;

// Удаленный вызов процедуры создания заявки
service OrderProcessingForClient {

   rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse);
}
// Запрос на создание заявки
message CreateOrderRequest {
  //Id пользователя, который расшифровывается по схеме 8-4-4-4-12: 
  //"3422b448-2460-4fd2-9183-8000de6f8343".
  string user_id = 1;
  //Тип заявки - "Покупка" или "Продажа"
  OrderType type = 2;
  //Id товара, который расшифровывается по схеме 8-4-4-4-12: 
  //"3422b448-2460-4fd2-9183-8000de6f8343".
  string product_id = 3;
  //Цена товара
  moneyTypes.DecimalValue price = 4;
  //Количество товара
  int32 quantity = 5;   
}
// Ответ на создание заявки
message CreateOrderResponse {
   //Поле, выводящее список товаров или ошибку.
   oneof result {
      /*Сообщение об ошибке 
      Сообщение об ошибке выводится, если:
      1. Пользователь с таким Id не найден
      2. Пользователь с таким Id не имеет товаров
      3. Пользователь не имеет необходимое количества товара*/
      Error error = 1;
      //В случае успешного удаления товара - пустое поле
      SuccessResponse success = 2;
   }
}
//Пустое поле при успешной проверке данных
message SuccessResponse {

}
//Тип ошибки для вывода сообщения об ошибке
enum Error {
        // Пользователь с таким Id не был найден. 
	USER_NOT_FOUND = 0;
	// Пользователь  с таким Id не имеет товара.  
	USER_NOT_HAVE_PRODUCT = 1;
	// Пользователь не имеет необходимое количества товара. 
	USER_NOT_HAVE_QUANTITY_PRODUCT = 2;
}
//Тип операции при создании заявки
enum OrderType {
   // Продажа товара
   SELL_ORDER = 0;
   // Покупка товара
   BUY_ORDER = 1;
}