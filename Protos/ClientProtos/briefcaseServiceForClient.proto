syntax = "proto3";

option csharp_namespace = "BriefcaseForClient";

package BriefcaseClient;

import "decimalValue.proto";

/* Определение сервиса портфеля пользователя, которое включает:
1. Запрос-ответ на получение товаров пользователя
2. Запрос-ответ на добавление товара пользователя
3. Запрос-ответ на удаление товара пользователя
4. Запрос-ответ на подтверждение выставления заявки
*/

service UserBriefcaseServiceForClient  {

    rpc GetUserProducts (GetUserProductsRequest) returns (GetUserProductsResponse);
    rpc AddProduct (AddProductRequest) returns (AddProductResponse);
    rpc RemoveProduct (RemoveProductRequest) returns (RemoveProductResponse);
    rpc ValidateOrder (ValidateOrderRequest) returns (ValidateOrderResponse);
}
//Запрос на получение товаров пользователя
message GetUserProductsRequest {
    //Id пользователя, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string user_id = 1;
} 

//Ответ на получение товаров пользователя
message GetUserProductsResponse {
    //Поле, выводящее список товаров или сообщение об ошибке.
    oneof response {
        //Список товаров
    	ProductsList list = 1;
        /*Сообщение об ошибке 
        Сообщение об ошибке выводится, если:
        1. Пользователь с таким Id не найден
        2. Пользователь с таким Id не имеет товаров*/
    	Error error = 2;
    }
}
//Запрос на добавление товара
message AddProductRequest {
    //Id пользователя, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string user_id = 1;
    //Информация о добавленном товаре
    Product product = 2;
}  
//Ответ на добавление товара
message AddProductResponse {
 //Поле, выводящее ошибку или пустое поле при добавлении товара.
   oneof result {
      /*Сообщение об ошибке 
      Сообщение об ошибке выводится, если:
      1. Пользователь с таким Id не найден
      2. Пользователь с таким Id не имеет товаров*/
      Error error = 1;
      //В случае успешного добавления товара - пустое поле
      SuccessResponse success = 2;
   }
}
//Запрос на удаление товара
message RemoveProductRequest {
    //Id пользователя, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string user_id = 1;
    //Id товара, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string product_id = 2;
    //Id создателя товара, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string author_id = 3;
}
//Ответ на удаление товара
message RemoveProductResponse {
   //Поле, выводящее ошибку или пустое поле в случае успешного удаления товара.
   oneof result {
      /*Сообщение об ошибке 
      Сообщение об ошибке выводится, если:
      1. Пользователь с таким Id не найден
      2. Пользователь с таким Id не имеет товаров*/
      Error error = 1;
      //В случае успешного удаления товара - пустое поле
      SuccessResponse success = 2;
   }
}
//Запрос на валидацию входных данных
message ValidateOrderRequest {
    //Id пользователя, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string user_id = 1;
    //Id товара, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string product_id = 2;
    //Количество товара
    int32 quantity = 3;
}
//Ответ на валидацию входных данных
message ValidateOrderResponse {
    oneof result {
   //Поле, выводящее ошибку или пустое поле при валидации входных данных.
      /*Сообщение об ошибке 
      Сообщение об ошибке выводится, если:
      1. Пользователь с таким Id не найден
      2. Пользователь с таким Id не имеет товаров*/
    	Error error = 1;
        //В случае успешной валидации данных - пустое поле
    	SuccessResponse success = 2;
    }
}
//Список товаров
message Product {
    //Id товара, который расшифровывается по схеме 8-4-4-4-12: 
    //"3422b448-2460-4fd2-9183-8000de6f8343".
    string productId = 1; 
    //Название товара
    string name = 2;
    //Маркер авторства - "Мой"/"Чужой"
    string authorMarker = 3;
    //Цена товара
    moneyTypes.DecimalValue price = 4; 
    //Описание товара
    string description = 5; 
    //Количество товара
    int32 count = 6; 
}
//Сообщение об ошибке
enum Error {
    //Пользователь с таким Id не был найден. 
	USER_NOT_FOUND = 0;
    // Пользователь с таким Id не имеет товар.
	USER_NOT_HAVE_PRODUCT = 1;
    // Пользователь не имеет необходимое количества товара. 
	USER_NOT_HAVE_QUANTITY_PRODUCT = 2;
}
//Пустое поле при успешной проверке данных
message SuccessResponse {
   
}
//Вывод последующей строчки в списке товаров
message ProductsList {
	repeated Product products = 1;
}
